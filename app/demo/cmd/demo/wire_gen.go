// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"goproject/app/demo/internal/biz"
	"goproject/app/demo/internal/conf"
	"goproject/app/demo/internal/data"
	"goproject/app/demo/internal/server"
	"goproject/app/demo/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, auth *conf.Auth, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewMysqlClient(confData)
	if err != nil {
		return nil, nil, err
	}
	redis, cleanup2, err := data.NewRedisClient(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	discovery, err := data.NewDiscovery(registry)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	greeterClient, cleanup3, err := data.NewThinktankServiceClient(auth, discovery)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataData, cleanup4, err := data.NewData(confData, logger, db, redis, greeterClient)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	todoRepo := data.NewTodoRepo(dataData, logger)
	todoUsecase := biz.NewTodoUsecase(auth, todoRepo, greeterClient, logger)
	todoService := service.NewTodoService(todoUsecase)
	grpcServer := server.NewGRPCServer(confServer, auth, todoService, logger)
	httpServer := server.NewHTTPServer(confServer, auth, todoService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
