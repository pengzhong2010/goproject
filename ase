#!/bin/bash
set -e
#set -x

needhelp(){
  echo ''
  echo 'Usage:'
  echo ' sh tool.sh [command] [serviceName]  [args]'
  echo ''
  echo 'Detail:'
  echo ' Command                Des                                      eg.
 init                   init env                                 ./ase init
 new                    new app                                  ./ase new {myapp}
 config                 generate internal proto                  ./ase config {myapp}
 api                    generate all api proto                   ./ase api {myapp}
 add                    add api demo proto                       ./ase add {myapp} {myapi}
 apiclient              generate one api proto file              ./ase apiclient {myapp} {myapi}
 apiserver              generate one service file                ./ase apiserver {myapp} {myapi}
 apicommon              generate api common file                 ./ase apicommon
 apierror               generate api error file                  ./ase apierror
 buildlocal             build for local system                   ./ase buildlocal {myapp}
 buildlinux             build for linux                          ./ase buildlinux {myapp}
 generate               generate                                 ./ase generate {myapp}
 all                    generate all                             ./ase all {myapp}
 start                  start service                            ./ase start {myapp}
 help                   show help                                ./ase help
  '
}

if [ $# -lt 1 ]; then
  needhelp
  exit
fi

GOHOSTOS=`go env GOHOSTOS`
GOPATH=`go env GOPATH`
VERSION=`git describe --tags --always`

cmd=$1
serviceName=$2
arg=$3

init(){
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	go install github.com/go-kratos/kratos/cmd/kratos/v2@latest
	go install github.com/go-kratos/kratos/cmd/protoc-gen-go-http/v2@latest
	go install github.com/google/gnostic/cmd/protoc-gen-openapi@latest
	go install github.com/google/wire/cmd/wire@latest
	go mod download
}

new(){
  kratos new app/${serviceName} --nomod -r https://gitee.com/go-kratos/kratos-layout.git
}

config(){
  INTERNAL_PROTO_FILES=`find ./app/${serviceName}/internal -name "*.proto"`
  protoc --proto_path=./app/${serviceName}/internal \
	       --proto_path=./third_party \
 	       --go_out=paths=source_relative:./app/${serviceName}/internal \
	       ${INTERNAL_PROTO_FILES}
  exit
}

api(){
  API_PROTO_FILES=`find ./api/${serviceName} -name "*.proto"`
  protoc --proto_path=. \
         --proto_path=./api \
	       --proto_path=./third_party \
 	       --go_out=paths=source_relative:. \
 	       --go-http_out=paths=source_relative:. \
 	       --go-grpc_out=paths=source_relative:. \
 	       --openapi_out=fq_schema_naming=true,default_response=false:./doc \
	       ${API_PROTO_FILES}
  exit
}

buildlocal(){
  mkdir -p ./bin && go build -ldflags "-X main.Version=${VERSION}" -o ./bin/${serviceName} ./app/${serviceName}/cmd/${serviceName}/main.go ./app/${serviceName}/cmd/${serviceName}/wire_gen.go
  exit
}

buildlinux(){
  mkdir -p ./bin && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${VERSION}" -o ./bin/${serviceName} ./app/${serviceName}/cmd/${serviceName}/main.go ./app/${serviceName}/cmd/${serviceName}/wire_gen.go
  exit
}

generate(){
  go mod tidy
	go get github.com/google/wire/cmd/wire@latest
	go generate ./app/${serviceName}/...
	exit
}

start(){
  cd ./app/${serviceName}/cmd/${serviceName}/
  go run main.go wire_gen.go
  exit
}

add(){
  kratos proto add api/${serviceName}/v1/${arg}.proto
  exit
}

apiclient(){
  protoc --proto_path=. \
         --proto_path=./api \
	       --proto_path=./third_party \
 	       --go_out=paths=source_relative:. \
 	       --validate_out="lang=go:../" \
 	       --go-http_out=paths=source_relative:. \
 	       --go-grpc_out=paths=source_relative:. \
 	       --openapi_out=fq_schema_naming=true,default_response=false:./doc \
	       api/${serviceName}/v1/${arg}.proto
  exit
}

apiserver(){
  kratos proto server api/${serviceName}/v1/${arg}.proto -t app/${serviceName}/internal/service
  exit
}

apicommon(){
  protoc --proto_path=. \
         --proto_path=./api \
	       --proto_path=./third_party \
 	       --go_out=paths=source_relative:. \
         api/common/common.proto
  exit
}

apierror(){
  protoc --proto_path=. \
         --proto_path=./third_party \
         --go_out=paths=source_relative:. \
         --go-errors_out=paths=source_relative:. \
         api/error/error.proto
  exit
}


case ${cmd} in
  (init)
    init
    ;;
  (new)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    new
    ;;
  (config)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    config
    ;;
  (api)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    api
    ;;
  (buildlocal)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    buildlocal
    ;;
  (buildlinux)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    buildlinux
    ;;
  (generate)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    generate
    ;;
  (start)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    start
    ;;
  (add)
    if [ $# -ne 3 ]; then
      echo "args {3} not found"
      exit
    fi
    add
    ;;
  (apiclient)
    if [ $# -ne 3 ]; then
      echo "args {3} not found"
      exit
    fi
    apiclient
    ;;
  (apiserver)
    if [ $# -ne 3 ]; then
      echo "args {3} not found"
      exit
    fi
    apiserver
    ;;
  (apicommon)
    apicommon
    ;;
  (apierror)
    apierror
    ;;
  (all)
    if [ $# -ne 2 ]; then
      echo "args {2} not found"
      exit
    fi
    init
    api
    config
    generate
    ;;
  (*)
    needhelp
    ;;
esac