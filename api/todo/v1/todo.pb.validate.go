// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/todo/v1/todo.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "goproject/api/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.Mine(0)
)

// Validate checks the field values on CreateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoRequestMultiError, or nil if none found.
func (m *CreateTodoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateTodoRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Detail

	if len(errors) > 0 {
		return CreateTodoRequestMultiError(errors)
	}

	return nil
}

// CreateTodoRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTodoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoRequestMultiError) AllErrors() []error { return m }

// CreateTodoRequestValidationError is the validation error returned by
// CreateTodoRequest.Validate if the designated constraints aren't met.
type CreateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoRequestValidationError) ErrorName() string {
	return "CreateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoRequestValidationError{}

// Validate checks the field values on CreateTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoReplyMultiError, or nil if none found.
func (m *CreateTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTodoReplyMultiError(errors)
	}

	return nil
}

// CreateTodoReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTodoReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoReplyMultiError) AllErrors() []error { return m }

// CreateTodoReplyValidationError is the validation error returned by
// CreateTodoReply.Validate if the designated constraints aren't met.
type CreateTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoReplyValidationError) ErrorName() string { return "CreateTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoReplyValidationError{}

// Validate checks the field values on UpdateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoRequestMultiError, or nil if none found.
func (m *UpdateTodoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Detail

	if len(errors) > 0 {
		return UpdateTodoRequestMultiError(errors)
	}

	return nil
}

// UpdateTodoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTodoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTodoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoRequestMultiError) AllErrors() []error { return m }

// UpdateTodoRequestValidationError is the validation error returned by
// UpdateTodoRequest.Validate if the designated constraints aren't met.
type UpdateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoRequestValidationError) ErrorName() string {
	return "UpdateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoRequestValidationError{}

// Validate checks the field values on GetTodoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTodoReplyMultiError, or
// nil if none found.
func (m *GetTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Title

	// no validation rules for Detail

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return GetTodoReplyMultiError(errors)
	}

	return nil
}

// GetTodoReplyMultiError is an error wrapping multiple validation errors
// returned by GetTodoReply.ValidateAll() if the designated constraints aren't met.
type GetTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTodoReplyMultiError) AllErrors() []error { return m }

// GetTodoReplyValidationError is the validation error returned by
// GetTodoReply.Validate if the designated constraints aren't met.
type GetTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodoReplyValidationError) ErrorName() string { return "GetTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodoReplyValidationError{}

// Validate checks the field values on ListTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTodoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTodoRequestMultiError, or nil if none found.
func (m *ListTodoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	// no validation rules for Title

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for Orderby

	// no validation rules for Asc

	// no validation rules for Mine

	if len(errors) > 0 {
		return ListTodoRequestMultiError(errors)
	}

	return nil
}

// ListTodoRequestMultiError is an error wrapping multiple validation errors
// returned by ListTodoRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTodoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoRequestMultiError) AllErrors() []error { return m }

// ListTodoRequestValidationError is the validation error returned by
// ListTodoRequest.Validate if the designated constraints aren't met.
type ListTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoRequestValidationError) ErrorName() string { return "ListTodoRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoRequestValidationError{}

// Validate checks the field values on ListTodoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTodoReplyMultiError, or
// nil if none found.
func (m *ListTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTodoReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTodoReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTodoReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListTodoReplyMultiError(errors)
	}

	return nil
}

// ListTodoReplyMultiError is an error wrapping multiple validation errors
// returned by ListTodoReply.ValidateAll() if the designated constraints
// aren't met.
type ListTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoReplyMultiError) AllErrors() []error { return m }

// ListTodoReplyValidationError is the validation error returned by
// ListTodoReply.Validate if the designated constraints aren't met.
type ListTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoReplyValidationError) ErrorName() string { return "ListTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoReplyValidationError{}

// Validate checks the field values on TodoForList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TodoForList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TodoForList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TodoForListMultiError, or
// nil if none found.
func (m *TodoForList) ValidateAll() error {
	return m.validate(true)
}

func (m *TodoForList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Title

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return TodoForListMultiError(errors)
	}

	return nil
}

// TodoForListMultiError is an error wrapping multiple validation errors
// returned by TodoForList.ValidateAll() if the designated constraints aren't met.
type TodoForListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoForListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoForListMultiError) AllErrors() []error { return m }

// TodoForListValidationError is the validation error returned by
// TodoForList.Validate if the designated constraints aren't met.
type TodoForListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoForListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoForListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoForListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoForListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoForListValidationError) ErrorName() string { return "TodoForListValidationError" }

// Error satisfies the builtin error interface
func (e TodoForListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoForList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoForListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoForListValidationError{}
